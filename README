# Asynchronous Communication Channels for TinyScheme

## Object
The  original  motivation for  the  development  of communication  channels  for
TinyScheme was the processing  of the Hayes AT command set as  used in USB based
Wireless Mobile Communication Devices (USB CDC-TCM). Since we believe that there
is much  broader scope of  potential applications, the implementation  should be
considered as  a general design  pattern for  event processing with  an embedded
scheme interpreter.

## Channels
The communication channels presented here are an abstraction of processes linked
to queues. This allows to sequentially  process events from sereval input queues
without  blocking the  data sources  such as  TCP/UDP interprocess  commincation
sockets and  device files e.g.  for serial line  communication or any  other I/O
based data streams. The fundamental concept is strongly influenced by
[Clojure's core.async](http://clojure.com/blog/2013/06/28/clojure-core-async-channels.html)
library and  Go language channels but  the implementation given here  has more in
common with  Javascript's event  mechanism. Unlike  Clojure, TinyScheme  is like
Javascript  single  threaded  which  is  important as  a  precondition  for  its
compactness and simplicity.

All  concurrent operations  for  the  decoupling of  external  data sources  and
synchronous processing are  realized by native posix threads. The  main focus of
this approach is expressiveness,  extensibility and compactness for applications
which  do not  explicitly  demand  for maximum  throughput  or strict  real-time
capability. Many  applications such  as parsing,  filtering and  distribution of
Hayes AT command sequences as presented here fall in this category.

     --------                        ---------                       ---------
    | Socket | -- Reader Thread -->  | queue |  --> Proc Thread --> / Scheme /
     --------                        ---------                      ---------

The reader thread constantly reads data from  a data source which can be a file,
a  client or  a  server socket  and  stores the  result in  an  data queue.  The
processing thread  reads out elements or  data chunks from that  queue and feeds
them into the scheme interpreter by invoking a callback function with that data.
The scheme  interpreter is protected by  a mutex which guarantees  that only one
processing thread  at a time can  be executed. Given that  the scheme programmer
has not  to worry about  thread safeness at all.  He can safely  update internal
state and write out data to  any channel from any function respectively callback
function context.

## How to build

### Build and Runtime Dependencies

In addition  to the  commonly used  Unix system libraries  and build  tools such
as  libc,  pthreads and  the  autobuild  suite,  tcm  depends on  three  utitily
libraries, libcutils, libintercom and tinyscheme which are maintained respectily
provided  by  the same  author.

* [tinyscheme](https://github.com/linneman/tinyscheme)
* [libcutils](https://github.com/linneman/libcutils)
* [libintercom](https://github.com/linneman/libintercom)

You will need to compile and install these libraries on your system first. Refer
to the installation instructions on Github for for further explanation how to do
this.

### Download and Compile
Compiling tcm  is done  in the very  same way as  for libcutils  and libintercom
following the guidelines of the free software foundation:

    git clone git://github.com/linneman/tcm.git
    cd tcm

    ./autogen # invokes autoreconf -i for config script generation

    ./configure
    make
    make install # as root

In case  you have  downloaded an  official release as  gzipped tarball  you will
exclusively need the  last three commands since the configure  script is already
delivered with stable releases.

Pay attention to the fact that add  on libraries are per default installed under
the directory  `/usr/local/lib` which is not  in the library path  on many linux
distributions. Thus you  will need to put `/usr/local/lib` to  your library path
e.g. by defining the enviroment variable

    export LD_LIBRARY_PATH=/usr/local/lib.

Alternatively,  you  can  edit  `/etc/ld.so.conf`  which  contains  the  default
directories  searched.  Note  that  you  may  also  need  to  update  the  cache
`/etc/ld.so.cache` by running ldconfig (as root or with sudo).

## Working with TinyScheme
The TinyScheme interpreter is embedded in the daemon application 'tcm' which can
be  integrated  into system  startup  files  or started  from  a  shell via  the
following command:

    tcm

### Scheme Startup File
The  application reads  initially the  expressions defined  in the  startup file
'tcm.scm'  which is  expected  to  be stored  under  the  directory /usr/bin  or
/usr/local/bin. The tcm startup file delivered with this repository contains all
definition required  for the 'telephone  control model'  but the content  can be
easily extended  or replaced by  arbitrary scheme code.  It is neverless  a good
idea to refer to tcm.scm at first to get an idea how the code is working.

### REPL
The daemon starts by default a socket  based 'Read Eval Print Loop' (REPL) on TCP
port  37147. The  port can  be changed  or the  REPL feature  can be  completely
disabled by changing the definitions in the configuration file /etc/tcm.rc.

A REPL is thremendous tool for  rapid application development since it allows to
change and extend a  scheme application while it is running.  In example use the
following command on a platform shell to connect to tcm's embedded REPL:

    telnet localhost 37147

Be aware  of the packet  based transmission between  the telnet session  and the
REPL where carriage retrun / line feed characters separate evaluated data chunks
from each other. This characteristics causes problems when scheme functions are
separated by line separator characters. These characters shall be therefore omitted
or replaced by spaces to allow the scheme interpreter to evualte a form as a whole.
Rewrite in example the following function declaration:

    (define (modem-tcm-event-handler s)
      (write-channel host-tcm-ch s))

as one single line:

    (define (modem-tcm-event-handler s) (write-channel host-tcm-ch s))

The replacement  of CR/LF characters shall  be integrated into your  LISP coding
environment in example Emacs or ViM. Refer to
[OL's Emacs setup](https://github.com/linneman/emacs-setup)
for  REPL  extensions  for  scheme  to send  the  expression  under  the  cursor
respectively the form under the cursor with  the key strokes 'C-c x' and 'C-c e'
to the  *shell* buffer where  the REPL  connection shall be  previously enbaled.
These key strokes allow to constantly  evaluate scheme expressions in the target
environment while there  are written and thus  thremendously accelerating coding
and debugging sessions.

## Creating  Communication Channels
The  following   code  snippet   gives  an  illustration   how  to   create  two
interconnected TCP  server channels.  Both restrict connections  from localhost,
channel number  one listens  to port  5000, channel number  two listens  to port
5001:

    (define ch1
      (make-server-sock-channel "127.0.0.1" 5000
                                (lambda (s) (write-channel ch2 s))))

    (define ch2
      (make-server-sock-channel "127.0.0.1" 5001
                                (lambda (s) (write-channel ch1 s))))

The  callback  handlers   just  forward  their  data  which  is   bound  to  the
string  variable  's'  to  the  other   channel.  In  additaion  to  the  native
scheme  function make-server-sock-channel  there  is  currently its  counterpart
make-client-sock-channel and make-dev-channel for linking a device file e.g. for
a  serial line  interface, a  virtual terminal  or any  other device  file which
operates on  small data chunks  of currently 256 bytes  per chunk. All  of these
functions return a channel descriptor which shall be stored for later usage e.g.
when writing  to this channel  or to finally close  the channel by  invoking the
native function close-channel.

## Routing
Originally TCM  has been implemented  to extend respectively  partially overload
the  AT Hayes  command set  data  stream which  is interchanged  between a  file
interface to an embedded  System on Chip modem and virtual  Linux USB TTY device
representing the  USB CDC-TCM/ACM device  class. A small library  implemented in
TinyScheme  has been  provided  for these  routing purposes  where  most of  the
strings are just  exchanged between these device files but  some of them trigger
additional actions.

The idea has been orinally inspired by Clojure's [Compojure](https://github.com/weavejester/compojure)
and [Ring](https://github.com/ring-clojure/ring) frameworks but the implementation
presented here has bee adjusted to the needs of this AT command set proxy. The
general routing implemention can be found in the scheme function 'routes.scm'
which is included by 'tcm.scm' and thus also evaluated during system startup.

A route is considered a scheme function  which maps an input string to an output
string when  the route becomes  active or to logical  false (#f) when  the route
does not apply. Several routes are combined in a list. The scheme function route
applies the list of routes to a string. The macro functions 'define-route' and
'msg-begins-with' simplifies the definition of routing functions.

Example:

    (define-routes tst-routes
      (msg-begins-with "TOK1" (begin "got token1"))
      (msg-begins-with "TOK2" (begin "got token2")))

defines the list of routes 'tst-routes' for mapping strings which begin with the
tokens "TOK1" and  "TOK2". The following example illustrates how  to apply these
routes to a given string:

    (route my-routes "tok1") -> "got token 1"
    (route my-routes "tok2") -> "got token 2"
    (route my-routes "xy")   -> "xy"

The macro 'msg-begins-with' binds the symbol 'args' to the character string providing
the string's rest after the token:

    (define-routes tst-routes
      (msg-begins-with "TOKA" (begin "got token A"))
      (msg-begins-with "TOKB" (begin (string-append "got TOKB with args: " args))))

    (route tst-routes "TOKB3") -> "got TOKB with args: 3"

This allows to further process argument lists.

The concrete  Hayes proxy  implementation currently comes  with only  one sample
implementation to forward the Hayes command  to adjust the playback volume to an
external sound controler (ALSAUCM) listening on port 5044. Later implementations
might follow.

## License
This implementation code stands under the terms of the
[GNU GENERAL PUBLIC LICENSE 2.0](http://www.gnu.org/licenses/old-licenses/gpl-2.0).

August 2016, Otto Linnemann